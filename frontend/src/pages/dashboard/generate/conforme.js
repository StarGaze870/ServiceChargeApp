import { useCallback, useEffect, useRef, useState } from 'react';
import Head from 'next/head';
import 'bootstrap/dist/css/bootstrap.min.css';
import { useRouter } from 'next/router';
import { TextField } from '@mui/material';
import DrawerSidebarNavigation from '@/components/appBar/DrawerSidebarNavigation';
import YesNoModal from '@/components/modal/YesNoModal';
import CircularProgressModal from '@/components/modal/CircularProgressModal';
import exportAsImage from '@/utils/componentToImage/exportAsImage';
import isLoggedIn from '@/pages/isLoggedIn';
import TicketAutoComplete from '@/components/ticket/TicketAutoComplete';
import { getSingleTicket } from '@/apiRequests/tickets/getSingleTicket';

const tableStyle = {
    borderCollapse: 'collapse',
    width: '100%',
  };
  
  const cellStyle = {
    border: '1px solid black',
    padding: '8px',
    textAlign: 'left',
  };
  
  const newTableTopCellStyle = {
    borderLeft: '1px solid black',
    borderRight: '1px solid black',
    borderBottom: '1px solid black',
    paddingTop: '25px',    
  };

  const newTableBottomCellStyle = {
    border: '1px solid black',
    padding: '5px',
    textAlign: 'left',
  };

  const headerStyle = {
    ...cellStyle,
    backgroundColor: '#f2f2f2',
    fontWeight: 'bold',
  };

const AddTicket = () => {    

  // SELF VARIABLES
  const router = useRouter();
  const [currentDate, setCurrentDate] = useState('');
  const [showProgress, setShowProgress] = useState(false);
  const [showSuccessAlert, setShowSuccessAlert] = useState(false)
  const [amountError, setAmountError] = useState(false);
  
  const [amount, setAmount] = useState('');
  const [ticket, setTicket] = useState('');

  // LOGOUT VARIABLE
  const [logoutModalOpen, setLogoutModalOpen] = useState(false);    
  const onLogoutClick = () => setLogoutModalOpen(true);

  // DIV REFERENCE FOR HTML TO IMAGE 
  const exportRef = useRef();  

  useEffect(() => {    
    const ini = async () => {
      // Check users validity
      const isAuthrorized = await isLoggedIn();
      if (!isAuthrorized[0]) {
        await router.replace('/');
        return;
      }      
    };
    ini();

    const today = new Date();
    const dateStr = today.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
    setCurrentDate(dateStr);

  }, []) 

  useEffect(() => {
    
    const savedAmount = localStorage.getItem('amount');
    const savedTicket = localStorage.getItem('ticket');

    if (savedAmount && savedAmount !== 'null') setAmount(savedAmount);
    if (savedTicket && savedTicket !== 'null') setTicket(JSON.parse(savedTicket));    

  }, []);   

  // SUCESS ALERT
  useEffect(() => {

    if (!showSuccessAlert) return;

    setTimeout(async () => {      
      setShowSuccessAlert(false)
    }, 5000);

  }, [showSuccessAlert]);

  const handleLogoutCallback = useCallback(async () => {

    setShowProgress(true)

    localStorage.removeItem('email');
    localStorage.removeItem('password');
    localStorage.removeItem('role');              
    await router.push('/');
    
  })    

  const handleAmountChange = (e) => {
    const newAmount = parseInt(e.currentTarget.value);
    
    if (e.currentTarget.value.length === 0) {
        setAmountError(false);
        setAmount(e.currentTarget.value);
        localStorage.setItem('amount', e.currentTarget.value);
    } else if (isNaN(newAmount)) {
        setAmountError(true);
        setAmount(e.currentTarget.value);
        localStorage.setItem('amount', e.currentTarget.value);
    } else {
        setAmountError(false);
        setAmount(newAmount);
        localStorage.setItem('amount', newAmount);
    }
}

  const numberFormat = (value) =>
    new Intl.NumberFormat('en-IN', {
        style: 'currency',
        currency: 'Php'
    }).format(value);

  
  const handleSelectedTicket = useCallback(async (ticket) => {
                                
      localStorage.setItem('ticket', JSON.stringify(ticket));      
      setTicket(ticket)
  })

  const generateConforme = () => {

    if (ticket === null) { 
      return 
    }
    exportAsImage(exportRef.current, `${ticket.subject} #${ticket.id}`)
  }

  return (    
      <>                    
        <CircularProgressModal modalOpen={showProgress} />
        <Head>
          <title>Service Charge</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/appLogoWhite.png" />        
        </Head>                        
        <YesNoModal modalOpen={logoutModalOpen} setModalOpen={setLogoutModalOpen} onYesCallback={handleLogoutCallback} title='Logout'/>        
        <DrawerSidebarNavigation
          headerTitle='Generate Conforme Slip'
          selectedOption='Generate Conforme'
          onDashboard={onLogoutClick}
          onAddUser={onLogoutClick}          
          onSendEmail={onLogoutClick}
          onViewTickets={onLogoutClick}
          onViewUsers={onLogoutClick}
          onGenerateReport={onLogoutClick}
          onLogout={onLogoutClick}
          >    
            <div className='d-flex ms-3 mb-1'>
                <TextField
                    sx={{width: 300}}
                    name="amount"                
                    label="Amount"                
                    variant="outlined"
                    margin='normal'
                    value={amount}
                    onChange={handleAmountChange}
                    error={amountError}
                    helperText={amountError ? 'Invalid Amount' : ' '}
              />                
            </div>
            <div className='d-flex ms-3 mb-4'>
              <TicketAutoComplete selectedTicket={ticket} userSelectedCallback={handleSelectedTicket}/>    
            </div>            
            <div className='d-block vw-100 overflow-x-auto'>
                <div className="d-flex flex-column overflowX-auto overflowY-auto p-2" ref={exportRef} style={{ minWidth: '1000px', maxWidth: '1000px'}}>                                           
                    <table style={tableStyle}>
                        <thead>
                            <tr>
                            <th colSpan="2" style={{ ...headerStyle, textAlign: 'center' }}>
                                <div className='d-flex flex-row py-3'>
                                <div className='d-flex col-4'>
                                    <img src='/appLogoBlack.png' style={{width: '50px', height: '50px'}} className='ms-3 my-auto'></img>                    
                                </div>
                                <div className='d-flex col-4 flex-column justify-content-start'>
                                    <h5 className='mb-0'>Alliance Service Charge</h5>
                                    <h5>Conforme Slip</h5>
                                </div>                    
                                <div className='d-flex col-4'></div>
                                </div>
                            </th>
                            </tr>                
                        </thead>                                    
                        <tbody>
                            <tr>
                            <td style={{ ...cellStyle, width: '30%' }}>Date:</td>
                            <td style={{ ...cellStyle, width: '70%' }}>{currentDate}</td>
                            </tr>
                            <tr>
                            <td style={{ ...cellStyle, width: '30%' }}>Ticket Number:</td>
                            <td style={{ ...cellStyle, width: '70%' }}>{ticket ? ticket.id : ''}</td>
                            </tr>
                            <tr>
                            <td style={{ ...cellStyle, width: '30%' }}>Subject:</td>
                            <td style={{ ...cellStyle, width: '70%' }}>{ticket ? ticket.subject : ''}</td>
                            </tr>
                            <tr>
                            <td style={{ ...cellStyle, width: '30%' }}>Details:</td>
                            <td style={{ ...cellStyle, width: '70%' }}>{ticket ? ticket.description : ''}</td>
                            </tr>
                        </tbody>
                    </table>
                    <table style={tableStyle}>                                            
                    <tbody>                
                        <tr>
                        <td style={{ ...newTableTopCellStyle, textAlign: 'center', width: '50%'}}>Amount</td>
                        <td style={{ ...newTableTopCellStyle, textAlign: 'center', width: '50%'}}>Signature</td>
                        </tr>
                        <tr>
                            <td style={{ ...cellStyle, height: '100px', textAlign: 'center', fontWeight: 'bold', fontSize: '20px' }}>{numberFormat(isNaN(amount) ? 0 : amount)}</td>
                            <td style={{ ...cellStyle, height: '100px', textAlign: 'center' }}></td>
                        </tr>
                        <tr>                        
                        <td colSpan={2} style={{ ...newTableBottomCellStyle, textAlign: 'center', fontSize: '12px'}}>Â© Team Seven</td>
                        </tr>
                    </tbody>
                    </table>                                     
                </div>
            </div>    
          <div className='d-flex ms-4 my-4'>
            <button className='btn btn-dark py-2 px-4' onClick={generateConforme}>Generate</button>
          </div>    
        </DrawerSidebarNavigation>
      </>
    )  
};

export default AddTicket;