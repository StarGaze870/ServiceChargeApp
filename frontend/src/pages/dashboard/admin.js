import React, { useCallback, useEffect, useState } from 'react';
import Head from 'next/head';
import Container from '@mui/material/Container';
import 'bootstrap/dist/css/bootstrap.min.css';
import { useRouter } from 'next/router';
import isLoggedIn from '../isLoggedIn';
import { CircularProgress } from '@mui/material';
import CollapsibleTable from '@/components/table/CollapsibleTable';
import { getAllTickets } from '@/apiRequests/tickets/getAllTickets';
import DrawerSidebarNavigation from '@/components/appBar/DrawerSidebarNavigation';
// import AddTicketModal from '@/components/modal/AddTicketModal';
import AddTicketModal from '@/components/modal/AddTicketModal';
import { getSingleTicket } from '@/apiRequests/tickets/getSingleTicket';
import LogoutModal from '@/components/modal/LogoutModal';


const AdminDashboard = () => {    

  // SELF VARIABLES
  const router = useRouter();
  const [showProgress, setShowProgress] = useState(false);
  const [loading, setLoading] = useState(true);

  // TICKET TABLE VARIABLE
  const [ticketTableData, setTicketTableData] = useState(null)

  // TICKETS VARIABLE
  const [addTicketmodalOpen, setAddTicketModalOpen] = useState(false);    

  // LOGOUT VARIABLE
  const [logoutModalOpen, setLogoutModalOpen] = useState(false);    

  useEffect(() => {

    const ini = async () => {

      // CHECK USERS VALIDITY
      const isAuthrorized = await isLoggedIn();      
      if (!isAuthrorized[0]) {
        await router.replace('/');      
      }
      else {
        
        if (isAuthrorized[1].toString() !== 'Admin') {
          await router.replace(`/dashboard/${isAuthrorized[1].toString().toLowerCase()}`);
        } else {
          setLoading(false);
        }
      }      

      const getTickets = await getAllTickets();
      console.log("-- GETTING ALL TICKETS --")
      console.log(getTickets);

      setTicketTableData(getTickets[1]);      

    };
    ini();

  }, []);

  const onAddTicket = () => setAddTicketModalOpen(true);      
  const onLogoutClick = () => setLogoutModalOpen(true);

  const handleLogoutCallback = useCallback(() => {

    setShowProgress(true)

    localStorage.removeItem('email');
    localStorage.removeItem('password');
    localStorage.removeItem('role');              

    setTimeout(async () => {
      await router.push('/');
      setShowProgress(false);      
    }, 1000);
  })  

  const onAddTicketCallback = useCallback(async ({ticketId}) => {
    
    const newTicket = await getSingleTicket(ticketId);
    setTicketTableData([newTicket[1], ...ticketTableData])
    
  });

  return (
    !loading   && (
      <>
      {showProgress && (
          <div
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              width: '100%',
              height: '100%',
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              background: 'rgba(0, 0, 0, 0.5)',
              zIndex: 9999,
            }}
          >
            <CircularProgress color="warning" size="5rem" thickness={5}/>
          </div>
          )}
        <Head>      
          <title>Service Charge</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/appLogoWhite.ico" />        
        </Head>                
        <AddTicketModal modalOpen={addTicketmodalOpen} setModalOpen={setAddTicketModalOpen} onAddTicketCallback={onAddTicketCallback} />     
        <LogoutModal modalOpen={logoutModalOpen} setModalOpen={setLogoutModalOpen} onLogoutCallBack={handleLogoutCallback}/>

        <DrawerSidebarNavigation
          onDashboard={onLogoutClick}
          onAddUser={onLogoutClick}
          onAddTicket={onAddTicket}
          onSendEmail={onLogoutClick}
          onViewTickets={onLogoutClick}
          onViewUsers={onLogoutClick}
          onGenerateReport={onLogoutClick}
          onLogout={onLogoutClick}

          >        

        {/* DASHBOARD */}
        <div className='d-flex flex-column'>
            
            {/* DASHBOARD DATA */}
            <div className='d-flex flex-column flex-xxl-row justify-content-between'>
              <div className='col-12 col-xxl-7 d-flex flex-column'>
                <div className='d-flex flex-row justify-content-between w-100'>
                  {/* PENDING TICKETS */}
                  <div className='flex-fill d-flex bg-secondary'>
                    <h1 className='m-auto'>Pending Tickets</h1>
                  </div>
                  <div className='flex-fill d-flex bg-primary'>
                    <h1 className='m-auto'>Medium Priority</h1>
                  </div>
                </div>
                <div className='d-flex flex-row'>
                  <div className='flex-fill d-flex bg-info-subtle'>
                    <h1 className='m-auto'>High Priority</h1>
                  </div>
                  <div className='flex-fill d-flex bg-warning-subtle'>
                    <h1 className='m-auto'>Low Priority</h1>
                  </div>
                </div>
              </div>
              <div className='col-12 col-xxl-5 d-flex'>
                <div className='flex-fill d-flex bg-light'>
                  <h1 className='m-auto'>Total Available Devs</h1>
                </div>
              </div>
            </div>


            {/* DASHBOARD TABLE */}
            <div>
            <h3 className='ms-2'>Tickets</h3>
            {ticketTableData !== null && (
              <CollapsibleTable data={ticketTableData} />
            )}
            </div>
        </div>          

        </DrawerSidebarNavigation>
      </>
    )
  );
};

export default AdminDashboard;
